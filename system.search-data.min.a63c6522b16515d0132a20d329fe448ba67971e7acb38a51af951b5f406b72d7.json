[{"id":0,"href":"/system/docs/Linux/DHCP/","title":"DHCP Server","section":"System / Linux","content":"\rDHCP Server\r#\rDHCP Server\n"},{"id":1,"href":"/system/docs/Linux/HTTPS/","title":"HTTPS Server","section":"System / Linux","content":"\rHTTPS Server\r#\rHTTPS Server\n"},{"id":2,"href":"/system/docs/Linux/ISCSI/","title":"ISCSI Server","section":"System / Linux","content":"\rISCSI Server\r#\rISCSI Server\n"},{"id":3,"href":"/system/docs/Linux/Linux/","title":"Linux","section":"System / Linux","content":"\rLinux\r#\rLinux란\r#\r- Linux는 1991년 Linus Torvals가 개발한 운영체제의 하나이다. - Linux는 Unix 기반으로 만들어진 운영체제로 Unix가 애초부터 통신 네트워크를 지향해 설계된 것 처럼 Linux 또한 서버로 작동하는데 최적화 되어있다. - Linux는 자유 소프트 라이센스로 누구나 소스코드를 활용, 수정 및 재 배포가 가능하며, 이를 기반으로 지속적인 업그레이드가 이루어진다.\rf\rLinux 배포판\r#\r- 리눅스 커널, GNU소프트웨어 및 여러가지 자유 소프트웨어로 구성된 운영체제로 현재 전 세계쩍으로 300여가지의 배포판이 존재한다.\r- 리눅스는 사용자의 기호의 따라 결정할 수 있는 폭이 넓으며, 대표적인 운영체제로는 Redhat - CentOS / Debian - Ubuntu / Pedora / Suse 등이 존재한다.\rLinux 구조\r#\r- Linux는 크게 커널, 셸, 디렉토리로 이루어져 있다.\r#\r#\r#\r#\r#\r#\r#\r#\r"},{"id":4,"href":"/system/docs/Linux/Linux00/","title":"Linux","section":"System / Linux","content":"\rLinux\r#\rLinux란\r#\r- Linux는 1991년 Linus Torvals가 개발한 운영체제의 하나이다. - Linux는 Unix 기반으로 만들어진 운영체제로 Unix가 애초부터 통신 네트워크를 지향해 설계된 것 처럼 Linux 또한 서버로 작동하는데 최적화 되어있다. - Linux는 자유 소프트 라이센스로 누구나 소스코드를 활용, 수정 및 재 배포가 가능하며, 이를 기반으로 지속적인 업그레이드가 이루어진다.\r#\r-\r#\r-\r#\r-\r#\r-\r#\r-\r#\r-\r"},{"id":5,"href":"/system/docs/Linux/NFS/","title":"NFS Server","section":"System / Linux","content":"\rNFS Server\r#\rNFS Server\n"},{"id":6,"href":"/system/docs/Linux/SMB/","title":"SMB Server","section":"System / Linux","content":"\rSMB Server\r#\rSMB Server\n"},{"id":7,"href":"/system/docs/Hardware/CPU/","title":"What is CPU","section":"Hardware","content":"\rCPU\r#\rCPU란 (Central Processing Unit / main processor)으로 컴퓨터 시스템을 통제하고 프로그램(프로세스)의 연산을 실행하는 핵심적인 컴퓨터의 중앙 제어장치로 사람으로 따지면 뇌의 역할은 하는 내장형 칩을 의미한다.\nCPU는 기계어로 쓰인 명령어를 해석하며 실행하며, 외부의 정보를 입력받아 이를 기억하고, 연산하며 외부로 출력하는 역할을 수행한다.\nCPU는 크게 하기 3가지 구분할 수있다.\n처리할 명령어를 저장하는 프로세서와 레지스터 연산을 담당하는 산술논리연산장치(ALU / 연산장치), 명령어의 해석과 올바른 실행을 위해 CPU를 제어하는 제어장치(Control Unit) #\rCPU의 구조\r#\rCore : CPU의 Core 즉 CPU의 핵심적인 역할을 수행해내는 중심부 역할을 말하며 이 코어에서 시스템의 모든 연산처리를 수행한다.\nThread : Core는 H/W 적인 관점에서 본 관점이며, Thread는 논리적인 작업 관점에서 처리 단위를 나뉘어 연산처리(HyperThreading)를 수행한다고 할 수 있다.\nClock : Clock은 동작 주파수로 CPU의 속도를 나타내는 단위이며, CPU가 데이터 양에 따라 속도가 달라질 수 있다. 단, 클럭이 높을 수록 발열 및 전력사용이 증가하기에, 최근에는 Multi Core 및 Multi Thread로 일정량의 Clock을 유지시켜 성능 향상을 꾀하고 있다.\nCache Memory : CPU 내부에서 임시로 사용하는 버퍼(Buffer) 메모리 중 하나로, 자주 사용하는 파일 등을 따로 모아두고, 나중에 해당 파일을 다시 실행하면 컴퓨터에서 바로 불러오는 파일을 의미하며, CPU가 하나의 데이터를 처리하는 동안 메인 메모리로부터 다음에 처리할 데이터를 불러와 대기하는 시킬 수 있어, 처리 속도를 높일 수 있다.\n정말 간단하게 요악하자면 Core는 몸통, Thread는 몸통에 달린 팔이라고 할 수 있지만, Thread가 무조건 많다고 좋은 것이 아니며, 대부분 Thread가 높을 수록 Clock이 낮기 때문에 개개인에 맞게 사용하는 것이 옳다고 할 수 있다.\n#\rCPU 아키텍처\r#\r커널 및 프로세스 : 유저와 CPU 사이에서 서로의 언어를 해석하고 전달(OS, 프로그램)\nProtection ring : 유저가 사용하는 커널과 시스템이 사용하는 커널을 나눔으로써 시스템 자체를 보호(System call)\nVirtaul memroy / Page table : 유저가 사용하는 프로세스가 메모리에 접근하기 전에 사용되는 공간으로 실제 메모리 사용량의 변동성을 억제시켜 이를 통해 시스템의 안전성을 향상시키는 역할을 수행\nContext Switching : 실제 CPU는 특정 프로세스만을 지속적으로 점유시키고 있지 않으며, 다른 프로세스를 스왑하면서 사용되는 데, 이를 Context Switching이라 한다.\nPage Table Entry의 Protechtion bit : 유저가 사용하는 프로세스의 가상 메모리의 특정 주소는 커널 데이터를 담고 있어, sysc all을 호출하여 커널의 도움을 받으러 갈 때 Page Table을 커널 것으로 교체할 필요가 없어져, 파일의 Read/Write\n명령어(instrcution) : CPU 명령어 수행 동작\nPipeline : 파이프라인은 CPU가 하나의 명령어를 처리하는 과정도 너무 복잡하고 많기 때문에, 이를 잘게 쪼개서 여러 가지 작은 단계로 나누어 처리하는 방식\nCache : 주메모리에서 값을 읽는 동작은 CPU의 명령어 처리 속도에 비하면 한참 느리다. 따라서 이 갭을 줄이기 위해 매우 빠르지만 작은 저장 공간이 CPU에 있는데, 이를 캐시라고 한다.\n분기(Branch) 명령어는 어떤 조건이 맞으면 다음에 실행할 명령어의 위치를 임의로 지정할 수 있게 해준다. 이는 같은 명령어들을 반복해서 실행하거나 조건에 따라 다른 일을 하고 싶을 때 사용하는 매우 기본적인 명령어다.\n비순차적 명령어 처리(OoOE)는 파이프라인의 송출(Issue) → 실행(Execute) → 회신(Writeback) 단계에 한해서 늦게 온 명령어가 일찍 온 명령어를 새치기할 수 있는 기술\nSpeculative execution : 어떤 명령어가 특정 파이프라인 단계에 필요한 정보가 없어서 진행이 막혔을 때, 필요한 정보를 예측해서 높은 확률로 맞힌다면 틀렸을 때의 다소 큰 손해를 넘어서는 이익을 취할 수 있다. 고성능의 CPU는 이러한 예측에 기반한 갖가지 기술들을 적극 활용하고 있다.\n#\rCPU 처리과정\r#\rCPU의 처리과정을 간단하게 나열하면 아래와 같다.\nFetch: 실행할 명령어들을 가져온다.\nDecode: 이후 처리를 돕기 위해 명령어의 종류를 선택 및 결정한다. / CISC, RISC\nRename: 명령어가 가리키는 레지스터를, 내부에 숨어있는 물리적 레지스터로 매핑한다.\nDispatch: 명령어가 실행하기 위해 기다리는 대기열에 넣는다.\nIssue: 대기열에 있는 명령어가 실행될 수 있으면[12] 실행하기 위한 장치로 보낸다.\nExecute: 실행한다.\nWriteback: 결과값을 레지스터에 써야 한다면 쓴다. 결과값을 기다리고 있던 명령어가 있다면 결과가 생겼다고 알려준다.\nCommit: 명령어 수행을 완료하고, 명령어 실행을 위해 할당받은 자원을 모두 토해낸다. 명령어의 실행 결과를 사용자에게 노출시킨다.\n#\r"},{"id":8,"href":"/system/docs/Hardware/DISK/","title":"What is Disk","section":"Hardware","content":"\rDisk\r#\r#\rDisk란 보조기억장치로 RAM(주기억장치)이 전원이 없어지면 데이터가 삭제되는 반면, Disk는 전원이 없어진 이후에도 데이터가 유지되는 비휘발성 메모리이다. #\rHDD\r#\r#\rHDD (Hard Disk drive) 하드 디스크는 플로피 디스크와 같은 자기 기록 매체이나, 플로피 디스크와 다르게 금속 재질의 플래터에 데이터를 기록하기 때문에 플로피디스크와 구분짓기 위해 재질적으로 단단하다는 뜻으로 하드디스크라 한다. #\rHDD의 원리와 구조\r#\r#\r저장되는 모든 데이터는 원리적으로 0 or 1 두 디지털 신호로 의해 이루어진다. #\r"},{"id":9,"href":"/system/docs/Hardware/board/","title":"What is M/B","section":"Hardware","content":"\rMain Board\r#\rmain board란 서버의 주요 구성 부품(CPU, Ram, GPU, Nic 등)들을 설치, 연결, 조절하는 주 회로 기판(main circuit board)을 메인보드(main board)라고 한다.\n각 부품들이 하나로 연결되어 온전한 기능을 할 수 있게 해주는 회로가 존재하는 데, 이 회로들을 통해서 전기를 각 부품에게 배분해주는 역할을 하는 부품이 메인보드이다.\nmain board가 없으면 cpu가 램으로 처리된 정보를 보낼 수 없다.\n메인보드의 ROM에는 bios라는 일종의 작은 운영체제가 들어있다.\n연결된 모든 장치는 메인보드의 bus를 통하여 정보를 교류하며 그 흐름을 메인보드가 관리한다.\n전원공급장치(PSU)에서 공급된 전기는 메인보드에서 다시 전압을 조절하여 프로세서와 메인보드 및 각종 전자 장치에 공급됨\n메인보드에는 ram을 꽂을 수 있는 ram slot과 cpu slot, 내장 사운드 카드와 내장 랜카드, 외장 그래픽 카드, 사운드 카드, tv 수신 카드 등을 꽂을 수 있는 pci 슬롯을 제공함\n즉, main board란 각 파트의 브릿지 역할을 하는 토대이다.\n#\rMain board Part\r#\r#\rPSU (Power Supply Unit) : 전원공급장치\nNIC (Network Interface Controller) : 외장 네트워크 인터페이스 카드 / IPMI는 내장\nPCI (Peripheral Component Interconnect Bus) : GPU, M.2 등 다른 파트를 장착하기 위한 slot\nCPU : 중앙 처리장치\nMemory : 메인 메모리로 주로 RAM(Random Access Memory)를 의미\nR/C (Raid Controller) : R/C는 각 Disk의 raid 정보를 가지고 있으며, 이를 관리하는 파트\nFAN : 전방에서 후방으로 공기를 순환시키는 선풍기\nDisk : 비휘발성 메모리로 데이터를 저장\nCase : 내부의 파트를 보호하기 위한 Case\n#\rMemory slot은 하기 사진과 같이 채널을 이루고 있다. "},{"id":10,"href":"/system/docs/Hardware/NIC/","title":"What is NIC","section":"Hardware","content":"\rNetwork Interface Card\r#\rNIC(Network Interface Controller)이란 서버가 네트워크에 연결하여 통신하기 위해 사용하는 하드웨어 장치이다.\nOSI 계층 1(물리 계층)과 계층 2(데이터 링크 계층) 장치를 가지는데, MAC 주소를 사용하여 낮은 수준의 주소 할당 시스템을 제공하고 네트워크 매개체로 물리적인 접근을 가능하게 한다.\n"},{"id":11,"href":"/system/docs/Hardware/Memory/","title":"What is RAM","section":"Hardware","content":"\rWhat is RAM\r#\r#\rRAM이란 Random Access Memory로 ROM Read Only Memotry과는 반대로 휘발성 메모리를 의미한다.\nRandom Access라는 말은 어느 위치에든 똑같은 속도로 접근하여 읽고 쓸 수 있음을 의미하며, 사용자가 자유롭게 내용을 읽고 쓰고 지울 수 있는 기억장치로, 컴퓨터가 켜지면 CPU는 연산 및 동작에 필요한 내용이 전원이 유지되는 동안에 RAM에 저장된다.\n주로 주기억장치로 불리며 보조기억장치로는 흔이 우리가 사용하는 Disk(HDD, SDD 등)가 있다.\n단, RAM의 범주에는 \u0026lsquo;임의 접근\u0026rsquo;할 수 있는 메모리이므로 HDD 등의 장치들도 RAM의 범주에 들어가기도 하지만, HDD 등의 기억장치와 같이 어느 위치에나 직접 접근할 수 있으나 데이터의 물리적 위치에 따라 읽고 쓰는 시간에 차이가 발생하게 되는 기억장치들은 Direct Access Memory 또는 Direct Access Data Storage라고 부른다.\n#\r휘발성과 비휘발성\r#\r#\r휘발성 메모리 SRAM (Static Random Access Memory) : 전원이 차단되자마자 즉시 데이터가 삭제되는 메모리 DRAM (Dynamic Random Access Memory) : 내부에 전류를 일시적으로 저장하는 역할을 하여 약 5분 정도 데이터가 유지 될 수 있는 메모리 #\r메모리 구조\r#\r#\r프로그램이 실행되기 위해서는 프로그램이 메모리에 로드(load)되어야 하며, 이에따라 변수들이 저장될 메모리가 필요하다. 즉, 위 사진과 같이 프로그램의 실행을 위해 Code, Data, Heap, Stack 영역을 할당 받을 수 있다. #\rCode 영역 실행할 프로그램의 코드가 저장되는 영역으로 텍스트(code) 영역이라고도 부른다. 상수 및 컴파일 될 기계어가 들어가며, 프로그램이 시작하고 종료될 때까지 메모리를 점유한다. CPU에서는 Code 영역에 저장된 명령어를 순차적으로 가져가 처리한다. #\rData 영역 프로그램의 전역 변수와 정적(Static) 변수가 저장되는 영역으로 Data 영역 또한 프로그램이 시작하고 종료될 때까지 메모리를 점유한다. #\rHeap 영역 사용자가 직접 관리할 수 있는 영역으로, 사용자에 의해 동적으로 메모리 공간이 할당되고 해제된다. (malloc() 또는 new 연산자를 통해 할당 / free() 또는 delete 연산자를 통해서 해제) 메모리의 낮은 주소에서 높은 주소의 방향으로 할당되며, 런타임 시에 크기가 결정된다. 프로그램에 필요한 개체의 개수나 크기를 미리 알 수 없는 경우 사용 가능 #\rStack 영역 함수의 호출과 관계되는 지역 변수와 매개변수가 저장되는 영역으로, 함수의 호출과 함께 할당되며 함수의 호출이 완료되면 소멸한다. 함수의 호출 정보를 스택 프레임(Stack frame)이라고 한다. 메모리의 높은 주소에서 낮은 주소의 방향으로 할당된다. #\r"},{"id":12,"href":"/system/docs/Hardware/RC/","title":"What is RC","section":"Hardware","content":"\rRaidController\r#\rR/C(Raid Controller)란 RAID 인프라에서 디스크 드라이브를 관리하는 스토리지 구성 요소 유형입니다. 즉, RAID 디스크를 관리하는 서버에 물리 디스크 드라이브를 논리 장치로 제공한다. RAID 컨트롤러는 디스크 어레이 컨트롤러를 의미힌다. "},{"id":13,"href":"/system/docs/Linux/DNS/","title":"DNS Server","section":"System / Linux","content":"\rDNS Server\r#\rDNS (Domain Name System)\r#\rDNS란 도메인 네임 시스템으로 웹사이트의 IP 주소와 도메인 주소를 이어주는 전화번호부와 유사한 역할을 한다. www.mungdocs.kro.kr을 입력하면 DNS는 해당 사이트의 올바른 IP 주소를 찾는 역할을 수행하며, 해당 주소를 사용하여 원본 서버 또는 CDN edge 서버와 통신하여 웹 사이트 정보에 엑세스 한다. 위와 관련된 과정은 DNS쿼리에 응답하는 전용 시스템인 DNS에서 발생한다. 즉, DNS는 웹 사이트의 데이터가 저장되어 있는 호스팅 서버라고 할 수 있으며, 각 회선에 연결된 컴퓨터, 장치의 IP주소가 할당되어 있고, 이 주소를 실제 웹사이트 주소라 할 수 있으며, DNS는 이와 같은 IP주소를 저장해 두었다가, 인터넷 사용자들이 요청하면 연결해주는 역할을 수행한다. DNS Server\nReference https://www.cloudflare.com/ko-kr/learning/dns/what-is-a-dns-server/ https://gentlysallim.com/dns%EB%9E%80-%EB%AD%90%EA%B3%A0-%EB%84%A4%EC%9E%84%EC%84%9C%EB%B2%84%EB%9E%80-%EB%AD%94%EC%A7%80-%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC/ "}]