<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS Training on Mung Book</title>
    <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/</link>
    <description>Recent content in AWS Training on Mung Book</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cloud</language>
    <atom:link href="http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS 시작하기</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/Start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/Start/</guid>
      <description>AWS 시작히기&#xD;#&#xD;#&#xD;AWS 계정 생성&#xD;#&#xD;#&#xD;AWS 서비스를 이용하기 위한 계정을 생성하고, MFA를 사용하여 보안을 강화하는 방법에 대해 알아보도록 하겠습니다. #&#xD;#&#xD;-먼저 AWS을 통해 AWS에 접속합니다.&#xA;#&#xD;#&#xD;AWS 계정 새로 만들기를 선택합니다. #&#xD;#&#xD;다음 항목들을 기입 후, 계정 만들기를 선택합니다. #&#xD;#&#xD;프로페셔널과 개인 중 맞는 항목을 선택 후, 아래 항목들을 기입합니다. 영어 주소를 모를시 Link를 참조하세요. 프로페셔널 : 조직, 기업의 사용&#xA;개인 : 개인적으로 사용</description>
    </item>
    <item>
      <title>AWS 사용자 계정 생성</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/IAM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/IAM/</guid>
      <description>AWS 사용자 계정 생성&#xD;#&#xD;#&#xD;AWS 사용자 계정 생성&#xD;#&#xD;#&#xD;이번 시간에는 AWS 계정생성에 이어 AWS 사용자 계정을 생성해보도록 하겠습니다. IAM이 무엇인지는 AWS IAM을 참고해주세요. #&#xD;#&#xD;먼저 AWS에 로그인 후, IAM 서비스를 검색합니다. #&#xD;#&#xD;IAM 서비스에 진입하여, 메뉴에서 사용자를 클릭합니다. #&#xD;#&#xD;사용자 추가를 선택합니다. #&#xD;#&#xD;사용자의 이름을 기입하고, 엑세스 유형을 선택합니다. AccesskeyId와 SecreKey는 AWS CLI, API, SDK 등 기타 개발 도구의 사용되며, Login url, Password 콘솔창의 로그인시 사용됩니다.</description>
    </item>
    <item>
      <title>AWS CLI 활용</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/Cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/Cli/</guid>
      <description>AWS CLI 활용&#xD;#&#xD;#&#xD;AWS CLI 활용&#xD;#&#xD;#&#xD;이번 시간에는 AWS CLI을 활용하는 방법에 대해 알아보도록 하겠습니다. AWS CLI의 대한 개념과 설치는 AWS CLI를 참고해주세요. #&#xD;#&#xD;AWS CLI 기본설정&#xD;#&#xD;#&#xD;먼저 여기서는 Window 10, Powershell에서 진행하도록 하겠습니다. Linux나 Mac 등 타 OS도 AWS CLI가 설치되어 있으면 모두 동일하니 똑같이 진행하셔도 문제없습니다. #&#xD;#&#xD;먼저 프롬프트 혹은 터미널을 실행 후, aws configure을 입력합니다. 그러면 엑세스 키와 시크릿 키, 리전 그리고 파일형식을 입력하는 값이 나오는 데, 만약 전 시간에서 사용자 계정을 만들면서 학습했던 프로그래밍 엑세스 방식이 생각나신다면, 한결 수월하게 해결하실 수 있습니다.</description>
    </item>
    <item>
      <title>AWS 사용자 정의 VPC 생성</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/VPC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/VPC/</guid>
      <description>AWS 사용자 정의 VPC 생성&#xD;#&#xD;#&#xD;AWS 사용자 정의 VPC 생성&#xD;#&#xD;#&#xD;이제 본격적으로 AWS 서비스들에 대해서 다루어 보겠습니다. 그 중, AWS 서비스의 근간이 VPC를 생성해 보도록 하겠습니다. VPC 중요한 개념이므로, VPC에 대한 개념이 부족한 분들은은 AWS VPC를 참고해주세요. #&#xD;#&#xD;GUI 환경에서의 사용자 정의 VPC 생성&#xD;#&#xD;기본적인 VPC 생성의 순서&#xA;1. VPC 네트워크 생성 2. Internet Gateway 설정&#xA;2. Subnet 설정&#xA;3. Route Table 설정</description>
    </item>
    <item>
      <title>AWS EC2 생성</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/EC2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/EC2/</guid>
      <description>AWS EC2 생성&#xD;#&#xD;#&#xD;AWS EC2 생성&#xD;#&#xD;#&#xD;이번 장에서는 저번 장에서 생성했던 사용자 정의 VPC의 대역에 EC2를 생성해 보도록 하겠습니다. EC2 또한 중요한 개념이므로, EC2에 대한 학습을 원하는 분들은 AWS EC2를 참고해주세요. #&#xD;#&#xD;EC2 ( Elastic Compute Cloud ) 생성&#xD;#&#xD;기본적인 EC2 생성의 순서&#xA;1. AMI ( Amazon Machin Image ) 선택 2. Instance type 선택&#xA;2. Instance Network 설정&#xA;3. Storage 설정&#xA;5. Tag 설정</description>
    </item>
    <item>
      <title>AWS AMI 생성</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/AMI/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/AMI/</guid>
      <description>AWS AMI 생성&#xD;#&#xD;#&#xD;저번 장에서는 EC2를 생성해보았습니다. 이번 Marketplace에서 AMI를 사용해서 인스턴스를 만들고, 생성한 인스턴스를 사용해서 AMI를 만들어 보도록하겠습니다. AMI에 대한 학습을 원하는 분들은 AWS AMI를 참고해주세요. #&#xD;AWS AMI 생성&#xD;#&#xD;#&#xD;#&#xD;먼저 EC2 생성을 위해 인스턴스 시작을 클릭 합니다. #&#xD;#&#xD;AMI 선택화면이 나오면 AWS Marketplace에서 CentOS를 입력 후, 선택합니다. 이와 같이 Marketplace에서는 사람들이 만들어둔 이미지를 사용할 수 있습니다. ( 단, 유료도 있으니 주의가 필요합니다.</description>
    </item>
    <item>
      <title>AWS Elastic IP 할당</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/EIP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/EIP/</guid>
      <description>AWS Elastic IP 할당&#xD;#&#xD;AWS Elastic IP ( 이하 EIP )란 인스턴스의 IP를 고정적으로 할당시킨 IP를 뜻합니다. 만약 인스턴스를 생성할 시, 퍼블릭 IP를 활성화 하면, 인스턴스를 자동 실행시마다 유동적으로 IP가 변화하여 문제가 되는 데, 이러한 문제들을 해결할 수 있습니다. #&#xD;AWS Elastic IP 할당&#xD;#&#xD;#&#xD;#&#xD;EIP를 생성하기 위해 메뉴에서 EC2 서비스에서 네트워크 및 보안 -&amp;gt; 탄력적 IP를 선택합니다. 탄력적 IP 주소 할당을 클릭합니다. #&#xD;#&#xD;Amazon의 IPv4 주소 풀로 할당 받습니다.</description>
    </item>
    <item>
      <title>AWS ELB ( 2 Tier ) 생성</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/ELB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/ELB/</guid>
      <description>AWS ELB 생성&#xD;#&#xD;#&#xD;이번 장에서는 생성된 인스턴스들을 로드밸런싱하는 방법에 대해 알아보도록 하겠습니다. ELB 또한 중요한 개념이니, ELB에 대한 학습을 원하는 분들은 AWS ELB를 참고해주세요. #&#xD;AWS ELB 생성&#xD;#&#xD;#&#xD;ELB에 대한 생성 순서은 아래의 순서대로 진행합니다. 1. 인스턴스 생성&#xA;2. 대상그룹 생성&#xA;3. 로드 밸런서 생성&#xA;#&#xD;인스턴스 생성&#xD;#&#xD;#&#xD;먼저 기본 VPC에 가용영역 a와 c에 한 대씩, 총 두 대의 인스턴스를 생성해주세요. 보안 그룹은 80은 모두에게, 8009는 서로간만 통신이 가능하게 설정해주세요.</description>
    </item>
    <item>
      <title>AWS AutoScaling</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/AS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/AS/</guid>
      <description>AWS AutoScaling&#xD;#&#xD;#&#xD;이번 장에서는 CloudComputing의 꽃이라고도 할 수 있는 AutoScaling 서비스를 구축해보겠습니다. AutoSacling의 대한 개념은 AutoScaling을 참조해주세요. #&#xD;AWS AutoScaling ( 이하 As )&#xD;#&#xD;#&#xD;#&#xD;As 그룹 생성을 위해 AWS에 접속 합니다. 인스턴스를 생성하여, Apache가 자동시작되어있게 설정 후, AMI를 생성합니다. AMI 생성 참고 #&#xD;#&#xD;AMI 생성 후, As 그룹 생성을 위해 좌측의 메뉴에서 Auto Scaling &amp;gt; Auto Scaling 그룹 생성을 클릭합니다. #&#xD;#&#xD;As그룹에서 시작하기를 클릭합니다.</description>
    </item>
    <item>
      <title>AWS RDS 생성</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/RDS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/RDS/</guid>
      <description>AWS RDS 생성&#xD;#&#xD;#&#xD;AWS RDS는 우리가 흔히 아는 Database ( Oracle db, Mysql, MariaDB )와 동일한 역할을 수행하지만, 보다 편리하고 안전하게 관리가 가능합니다. AWS RDS는 중요한 개념이므로, RDS에 대한 개념이 학습이 필요한 들은 AWS RDS를 참고해주세요. #&#xD;AWS RDS 생성&#xD;#&#xD;#&#xD;#&#xD;먼저, RDS의 생성을 위해 AWS의 접속하여 RDS를 검색 후 클릭합니다. #&#xD;#&#xD;데이터베이스 생성 -&amp;gt; 데이터베이스 생성을 클릭합니다. #&#xD;#&#xD;여러 DB와 옵션을 사용할 수 있지만, 여기에서는 프리 티어 내에서 사용할 수 있도록 성정하도록 하겠습니다.</description>
    </item>
    <item>
      <title>AWS 3Tier 구현</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/3Tier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/3Tier/</guid>
      <description>&#xD;****&#xD;#&#xD;#&#xD;****&#xD;#&#xD;#&#xD;#&#xD;예제 1.&#xD;#&#xD;다음의 인스턴스를 생성해보세요.&#xD;#&#xD;예제 1. 답안&#xD;↕&#xD;사용자 계정을 생성할 시, 엑세스 유형에서 프로그래밍 방식 엑세스만을 선택합니다. 정책에서 admin의 권한을 선택 후 생성합니다. </description>
    </item>
    <item>
      <title>AWS S3 생성</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/S3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/S3/</guid>
      <description>AWS S3 생성&#xD;#&#xD;#&#xD;이번 장에서는 S3를 생성해보도록 하겠습니다. S3 또한 중요한 개념이니, S3에 대한 학습을 원하는 분들은 AWS S3를 참조해주세요. #&#xD;AWS S3 생성&#xD;#&#xD;#&#xD;#&#xD;AWS 서비스에서 S3를 검색합니다. #&#xD;#&#xD;버킷 생성을 클릭합니다. #&#xD;#&#xD;버킷의 이름과 리전을 선택합니다. 참고로 S3는 VPC에 영향을 받지 않습니다. #&#xD;#&#xD;옵션을 선택합니다. 여기서는 기본 값으로 생성을 진행합니다. #&#xD;#&#xD;S3에 대한 권한을 설정합니다. 기본적으로 차단되어 있는 것이 좋으며, 경우에 따라 설정 값을 변경합니다.</description>
    </item>
    <item>
      <title>AWS OwnCloud</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/OwnCloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/OwnCloud/</guid>
      <description>Nas-Owncloud 실습&#xD;#&#xD;#&#xD;Owncloud를 활용하여 Ec2 Nas 만들기&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;EC2 생성&#xA;&amp;gt; OS : Ubuntu 18.04&#xD;&amp;gt; Flavor : t2.micro&#xD;&amp;gt; Storage : 100G ( 원하는 만큼, 차후에 EFS 등으로도 가능합니다. )&#xD;&amp;gt; VPC : Custop&#xD;&amp;gt; 보안그룹 : Custop 인스턴스를 생성합니다. #&#xD;#&#xD;먼저, Owncloud를 사용하기 위해서는 LAMP를 설치해야합니다. $ sudo apt install -y tasksel $ sudo tasksel install -y lamp-server # LAMP 간편 설치 $ sudo apt install -y apache2 # apache2 설치 $ sudo apt install -y mysql-server # mysql 설치 $ sudo apt install -y php7.</description>
    </item>
    <item>
      <title>AWS CloudFormation</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/CloudFormation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/CloudFormation/</guid>
      <description>AWS CloudFormation&#xD;#&#xD;#&#xD;이번 장에서는 CloudFormation의 탬플릿을 사용하여 서버를 자동 구축되도록 생성해보도록 하겠습니다. CloudFormation의 대한 개념은 CloudFormation을 참고하세요. #&#xD;CloudFormation을 활용한 자동구축&#xD;#&#xD;#&#xD;#&#xD;CloudFormation 아키텍처 예시&#xD;#&#xD;#&#xD;#&#xD;먼저, AWS에서 CloudFormation 검색 후 클릭합니다. #&#xD;#&#xD;스택 생성을 클릭합니다. #&#xD;#&#xD;#&#xD;스택 생성을 위해 아래의 값을 cloudformation_instance.template 을 생성하여 업로드 합니다. 보통 Templates 파일은 S3에 저장된 것을 사용하지만, 여기서는 로컬환경에서 가져와 사용해보도록 하겠습니다. CloudFormation Templates 참조 #&#xD;{ &amp;#34;AWSTemplateFormatVersion&amp;#34; : &amp;#34;2010-09-09&amp;#34;, &amp;#34;Resources&amp;#34;: { &amp;#34;Instance&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;AWS::EC2::Instance&amp;#34;, &amp;#34;Properties&amp;#34;:{ &amp;#34;Monitoring&amp;#34;: &amp;#34;false&amp;#34;, &amp;#34;ImageId&amp;#34;: &amp;#34;[ AMI ID ]&amp;#34;, &amp;#34;KeyName&amp;#34;: &amp;#34;[ Key ]&amp;#34;, &amp;#34;InstanceType&amp;#34;: &amp;#34;t2.</description>
    </item>
    <item>
      <title>AWS 서버리스 사이트 구축</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/NoServer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/NoServer/</guid>
      <description>AWS 서버리스 사이트 구축&#xD;#&#xD;#&#xD;이번 장에서는 S3를 통해 서버가 없는 정적인 사이트를 구현해보도록 하겠습니다. 이와 같이 서버리스의 가장 큰 특징은 EC2처럼 상시 실행 상태 중이 아니여도, 사용자가 요청시에만 실행이 가능하기 때문에 비용면과 운영면에서 효율적이라 할 수 있습니다. AWS에서는 S3에서 웹 호스팅 기능을 제공하고 있어, 이를 통해 구현해보도록 하겠습니다. #&#xD;AWS 서버리스 사이트 구축&#xD;#&#xD;#&#xD;#&#xD;먼저, AWS에 접속하여 S3 서비스를 검색 후, 클릭합니다. #&#xD;#&#xD;S3를 시작하기 위해 버킷을 생성합니다.</description>
    </item>
    <item>
      <title>정리 중</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/EBS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/EBS/</guid>
      <description>AWS Elastic Fire System&#xD;#&#xD;#&#xD;EFS&#xD;#&#xD;#&#xD;#&#xD;AWS 서비스에서 EFS를 클릭합니다. #&#xD;#&#xD;스토리지 생성을 위해 파일 시스템 생성을 클릭합니다. #&#xD;#&#xD;네트워크 엑세스를 구성합니다. 여기서는 기본 VPC에서 가용영역 a, c를 사용하겠습니다. #&#xD;#&#xD;파일 시스템 설정 구성을 설정합니다. 여기서는 후에 설정을 전부 기본 값을 사용하여 생성합니다. #&#xD;#&#xD;생성된 내용을 확인합니다. #&#xD;#&#xD;EFS 사용하기 위해 가용영역 a, c에 인스턴스를 생성합니다. #&#xD;#&#xD;$ yum install make git binutils&#xD;$ git clone https://github.</description>
    </item>
    <item>
      <title>AWS Cognito</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/Cognito/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/Cognito/</guid>
      <description>AWS Cognito&#xD;#&#xD;#&#xD;AWS Cognito&#xD;#&#xD;#&#xD;#&#xD;Cognito는 기본적으로 모바일에서 인증을 진행 후, 인증 혹은 비인증에 해당하는 리소스에 대한 사용 권한을 부여 받는 형식으로 진행됩니다. #&#xD;#&#xD;Cognito 서비스 사용을 위해서 먼저, AWS에 접속하여 Cognito를 검색합니다. Cognito에 대한 개념은 Cognito를 참고하세요. #&#xD;#&#xD;Cognito의 메인 페이지에서 &amp;gt; 자격 증명 풀 관리를 클릭합니다. #&#xD;#&#xD;새 자격 증명 풀을 생성합니다. 인증되지 않은 자격 증명은 비인증 사용자에 대한 엑세스 권한을 설정하는 옵션입니다.</description>
    </item>
    <item>
      <title>EC2 동적 사이트 구축</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/EC2Site/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/EC2Site/</guid>
      <description>EC2 동적 사이트 구축&#xD;#&#xD;#&#xD;이번 장에서는 EC2와 WordPress, RDS를 활용해 동적 사이트를 구축해보겠습니다. 이 장에서는 RDS 복제본 사용시 과금이 청구될 수 있습니다. 이를 원치 않는 분들은, RDS 설정 시, Multi-AZ 설정을 하지 않고, 1개의 Master RDS만 생성 후 진행하세요.&#xD;#&#xD;EC2 동적 사이트 구축&#xD;#&#xD;#&#xD;#&#xD;VPC VPC 이름 IPv4 CIDR VPC-WordPress 10.0.0.0/16 #&#xD;Subnet Subnet 이름 VPC AZ IPv4 CIDR WordPress-Public-Subnet VPC-WordPress ap-northeast-a 10.0.1.0/24 WordPress-Public-Subnet2 VPC-WordPress ap-northeast-c 10.</description>
    </item>
    <item>
      <title>Elastic Beanstalk 사이트 구축</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/ElasticBeanstalk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/ElasticBeanstalk/</guid>
      <description>Elastic Beanstalk 사이트 구축&#xD;#&#xD;#&#xD;이번 장에서는 Elastic Beanstalk를 활용해서 WordPress 사이트를 구축해보겠습니다. Elastic Beanstalk가 무엇인지는 Elastic Beanstalk를 참조해주세요. #&#xD;Elastic Beanstalk 사이트 구축&#xD;#&#xD;#&#xD;#&#xD;Elastic Beanstalk는 zip 형식으로 애플리케이션을 압축해서 AWS 상에 업로드 할 수 있습니다. WordPress를 사용하기 위해 WordPress에서 zip 형식으로 다운로드 합니다. #&#xD;#&#xD;다운로드가 완료되면 AWS에서 Elastic Beanstalk를 검색합니다. #&#xD;#&#xD;Elastic Beanstalk의 생성을 위해 Create Application을 클릭합니다. #&#xD;#&#xD;애플리케이션의 이름과 태그를 설정합니다.</description>
    </item>
    <item>
      <title>AWS SES 메일 시스템 구축</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/SES/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/SES/</guid>
      <description>AWS SES 메일 시스템 구축&#xD;#&#xD;#&#xD;이번 장에서는 SES로 메일을 전송하는 시스템을 구축하여 보겠습니다. 단, SES 사용을 위해서는 버지나이 북부, 오레곤, 아일랜드만이 사용이 가능합니다. #&#xD;메일 시스템 구축 순서&#xA;1. Simple Email Service ( SES ) 사용&#xA;2. EC2 인스턴스로 메일 서버를 구축&#xA;3. 서드 파티 도구를 사용&#xA;#&#xD;AWS SES 메일 시스템 구축&#xD;#&#xD;#&#xD;#&#xD;먼저, SES 서비스를 이용하기 위해 AWS에서 SES를 검색합니다. #&#xD;#&#xD;Email Addresses &amp;gt; Verify a New Email Address를 클릭하여 인증을 진행합니다.</description>
    </item>
    <item>
      <title>AWS Lambda Crawling</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/AWS-Lambda-Crawling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/AWS-Lambda-Crawling/</guid>
      <description>AWS Lambda Crawling&#xD;#&#xD;#&#xD;AWS Lambda Crawling&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;$ pip3 install [ Package ] -t . $ pip3 install bs4 -t . $ &amp;#39;[ 7z 경로, 다른 zip도 가능 ]&amp;#39; a &amp;#39;[ 압축할 패키지 이름 ]&amp;#39; &amp;#39;[ 압축할 패키지 경로 ]&amp;#39; $ &amp;#39;C:\Program Files\7-Zip\7z.exe&amp;#39; a &amp;#39;C:\AWSLambda\bs4.zip&amp;#39; &amp;#39;.&amp;#39; #&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;#&#xD;예제 1.</description>
    </item>
    <item>
      <title>EC2 끄투온라인 서버 구축</title>
      <link>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/Game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/cloud/docs/AWS/AWSTraining/Game/</guid>
      <description>AWS 끄투온라인 서버 구축&#xD;#&#xD;#&#xD;AWS 끄투온라인 서버 구축&#xD;#&#xD;#&#xD;#&#xD;끄투 온라인은 오픈소스의 끝말잇기 게임입니다. #&#xD;#&#xD;EC2를 생성합니다. EC2 생성은 EC2 생성을 참조해주세요. OS 유형 disk security group Ubuntu18.04 t2.mini 8 all-open #&#xD;인스턴스를 생성 후, 아래와 같이 진행합니다. $ sudo apt -y update $ sudo apt -y upgrade $ sudo apt -y install node.js $ sudo apt -y install npm $ npm install -g grunt grunt-cli $ sudo apt -y install postgresql $ sudo apt -y install git $ sudo git clone https://github.</description>
    </item>
  </channel>
</rss>
