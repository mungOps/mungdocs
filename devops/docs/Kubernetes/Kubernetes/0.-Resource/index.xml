<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Requirements source on Mungs Book</title>
    <link>http://mungdocs.kro.kr/devops/docs/Kubernetes/Kubernetes/0.-Resource/</link>
    <description>Recent content in Requirements source on Mungs Book</description>
    <generator>Hugo</generator>
    <language>devops</language>
    <atom:link href="http://mungdocs.kro.kr/devops/docs/Kubernetes/Kubernetes/0.-Resource/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Manger Node</title>
      <link>http://mungdocs.kro.kr/devops/docs/Kubernetes/Kubernetes/0.-Resource/file0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/Kubernetes/Kubernetes/0.-Resource/file0/</guid>
      <description>&lt;h2 id=&#34;kubernets-manager-node&#34;&gt;&#xA;  &lt;strong&gt;Kubernets Manager Node&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kubernets-manager-node&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;br&gt;&#xA;&lt;h3 id=&#34;kubernets-manager-node-1&#34;&gt;&#xA;  &lt;strong&gt;Kubernets Manager Node&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kubernets-manager-node-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;br&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Manager Node는 노드는 클러스터에 대한 요청을 수신하고 분배하는 역할을 하는 로드 밸런서 역할을 하는 서버를 의미합니다.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;일반적으로 NGINX, HAProxy와 같은 프록시 서버를 사용하며, 여기서는 Nginx로 구성합니다.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;해당 노드의 주 역할은 아래와 같습니다.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;br&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;역할&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;예시&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;요청 라우팅&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;클라이언트의 API 요청을 적절한 서비스나 백엔드 노드로 전달합니다.&lt;/td&gt;&#xA;          &lt;td&gt;NGINX가 클라이언트 요청을 받아 특정 서비스로 라우팅합니다. 예를 들어, &lt;code&gt;/api/users&lt;/code&gt; 요청은 사용자 서비스로 전달됩니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;로드 밸런싱&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;요청을 여러 백엔드 노드에 균등하게 분배하여 성능을 최적화합니다.&lt;/td&gt;&#xA;          &lt;td&gt;HAProxy가 두 개의 인스턴스(예: &lt;code&gt;app-1&lt;/code&gt;, &lt;code&gt;app-2&lt;/code&gt;)로 요청을 분배합니다. 각 인스턴스가 50%의 트래픽을 처리합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;SSL 종료&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;HTTPS 요청을 처리하고 SSL 인증서를 관리하여 보안을 강화합니다.&lt;/td&gt;&#xA;          &lt;td&gt;NGINX가 SSL 인증서를 사용하여 클라이언트와의 연결을 암호화합니다. 내부 통신은 HTTP로 유지합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;캐싱&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;정적 콘텐츠를 캐싱하여 반복적인 요청에 대한 응답 속도를 향상시킵니다.&lt;/td&gt;&#xA;          &lt;td&gt;NGINX가 자주 요청되는 이미지 파일을 캐싱하여, 사용자가 이미지를 요청할 때마다 백엔드 서버에 요청하지 않습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;트래픽 관리&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;요청의 수를 제한하거나 특정 요청을 차단하여 트래픽을 관리합니다.&lt;/td&gt;&#xA;          &lt;td&gt;HAProxy가 특정 IP에서의 요청 수를 제한하여 DDoS 공격을 방어합니다. 예를 들어, 100초당 10회 요청으로 제한할 수 있습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;상태 검사&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;백엔드 서비스의 상태를 주기적으로 확인하여, 실패한 서비스에 요청을 보내지 않도록 합니다.&lt;/td&gt;&#xA;          &lt;td&gt;HAProxy가 &lt;code&gt;app-1&lt;/code&gt; 인스턴스의 상태를 확인하고, 문제가 발생한 경우 해당 인스턴스에 요청을 보내지 않도록 합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;br&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;간단하게 기존에 사용하던 &lt;strong&gt;Docker engine을 사용하지 않고 ContainerD를 사용 하게된 이유&lt;/strong&gt;를 정리하자면&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;쿠버네티스는 여러 컨테이너 런타임과 통신할 수 있도록 하는 CRI라는 표준 인터페이스를 설계함.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
