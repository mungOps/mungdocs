<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Mung Book</title>
    <link>http://mungdocs.kro.kr/devops/</link>
    <description>Recent content in Introduction on Mung Book</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>devops</language>
    <atom:link href="http://mungdocs.kro.kr/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>0. Docker</title>
      <link>http://mungdocs.kro.kr/devops/docs/Docker/Docker/Docker00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/Docker/Docker/Docker00/</guid>
      <description>Docker 와 Container&#xD;#&#xD;#&#xD;Docker의 등장배경&#xD;#&#xD;Docker는 2013년에 dotCloud의 의해 2013년 PyCon에서 (The future of Linux Containers) 처음 데모 되었다.&#xA;이는 오클랜드 항구에 들어오는 모든 컨테이너 선박을 보며, 한 서버에서다른 서버로 앱을 옮기는 것 보다, 지구 반대편으로 컨테이너를 옮기는 것이 더 쉽다라는 취지에서 개발됨.&#xA;위 문제는 기존 가상화기술을 사용하면 가능했으나, 리소스의 수가 커지고 대규모의 관리가 증대됨에 따라 필요성이 대두되어짐.&#xA;dotCloud 팀은 가상화 자체가 문제가 아니라 가상화 사용 방식이 문제라는 것을 인식했으며, 전체 운영 체제를 가상화하는 대신 애플리케이션과 해당 종속성만 가상화하는 것이 더 효율적이라 생각해었고, 이 것이 Container 의 개념으로 개발됨.</description>
    </item>
    <item>
      <title>0. Git이란?</title>
      <link>http://mungdocs.kro.kr/devops/docs/CICD/CICD/git00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/CICD/CICD/git00/</guid>
      <description>GIT&#xD;#&#xD;Git이란?&#xD;#&#xD;깃(Git)은 2005년에 리누스 토르발스에 의해 개발된 분산 버전관리 시스템(Distributed Version Control Systems - DVCS)&#xA;컴퓨터 파일의 변경사항을 추적하고 여러명의 사용자들 간에 파일에 대한 작업을 조율하는데 사용하는 형상관리 도구 이다.&#xA;DVCS에서의 클라이언트는 단순히 파일의 마지막 스냅샷을 Checkout 하지 않고, 저장소를 히스토리와 더불어 전부 복제하여, 서버에 문제가 생기더라도 바로 복구가 가능하다.&#xA;GIT과 SVN의 차이&#xD;#&#xD;단, Git은 기존 SVN(Subversion SVN)와 기능면에서는 유사해 보일 수는 있으나, 아래와 같은 차이를 가지고 있다.</description>
    </item>
    <item>
      <title>0. Git이란?</title>
      <link>http://mungdocs.kro.kr/devops/docs/Git/Git/git00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/Git/Git/git00/</guid>
      <description>GIT&#xD;#&#xD;Git이란?&#xD;#&#xD;깃(Git)은 2005년에 리누스 토르발스에 의해 개발된 분산 버전관리 시스템(Distributed Version Control Systems - DVCS)&#xA;컴퓨터 파일의 변경사항을 추적하고 여러명의 사용자들 간에 파일에 대한 작업을 조율하는데 사용하는 형상관리 도구 이다.&#xA;DVCS에서의 클라이언트는 단순히 파일의 마지막 스냅샷을 Checkout 하지 않고, 저장소를 히스토리와 더불어 전부 복제하여, 서버에 문제가 생기더라도 바로 복구가 가능하다.&#xA;GIT과 SVN의 차이&#xD;#&#xD;단, Git은 기존 SVN(Subversion SVN)와 기능면에서는 유사해 보일 수는 있으나, 아래와 같은 차이를 가지고 있다.</description>
    </item>
    <item>
      <title>0. Kubernetes</title>
      <link>http://mungdocs.kro.kr/devops/docs/Kubernetes/k8s/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/Kubernetes/k8s/k8s/</guid>
      <description>&#xD;Kubernetes&#xD;#&#xD;Kubernetes&#xD;#&#xD;#&#xD;</description>
    </item>
    <item>
      <title>0. Kubernetes</title>
      <link>http://mungdocs.kro.kr/devops/docs/Kubernetes/k8s/k8s00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/Kubernetes/k8s/k8s00/</guid>
      <description>Kubernetes&#xD;#&#xD;Kubernetes&#xD;#&#xD;#&#xD;kubernetes란 컨테이너화된 워크로드와 서비스를 관리하기 위한 확장가능한 오픈소스 플랫폼이라 할 수 있다. IaC기반으로 선언적 구성과 자동화의 용이하며, 빠르게 성장하는 생태계를 가지고 있다. #&#xD;#&#xD;Kubernets가 대두되는 이유&#xD;#&#xD;#&#xD;위 그림은 Traditional Deployment (전통적인 배포), Virtualized Deployment (가상화 배포), Container Deployment(컨테이너 배포)로 나뉘어지고 있으며 각 배포들은 하기와 같은 특징들을 가지고 있다.&#xA;전통적인 배포: 물리 서버에서 배포가 진행되며, 리소스의 한계를 전의할 방법이 없어 성능저하와 여러 장애를 유발 가능성이 존재 가상화 배포: 전통적인 배포에 해결책으로 물리서버 위에 가상화서버(별도의 격리)를 올려 리소스의 한계를 타파하고, 효율을 극대화시킨다.</description>
    </item>
    <item>
      <title>1. Kubernetes Object</title>
      <link>http://mungdocs.kro.kr/devops/docs/Kubernetes/k8s/k8s01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/Kubernetes/k8s/k8s01/</guid>
      <description>Kubernetes Object&#xD;#&#xD;Kubernetes Object&#xD;#&#xD;쿠버네티스의 오브젝트란 시스템에서 영속성을 가지는 명세서를 의미하며, 이는 아래와 같이 기술할 수 있다.&#xA;어떤 노드에서 어떤 파드 및 어플리케이션의 동작 유무 해당 어플리케이션의 사용가능 리소스 해당 어플레케이션의 재구동 정책, 업그레이드, 가용성 등의 대한 동작 정책 즉, 쿠버네티스 오브젝트란 하나의 의도를 담은 명세서를 의미하며, 이를 생성하게되면 쿠버네티스 상에서는 해당 오브젝트의 영속성을 보장하기 위해 지속적으로 동작할 것이고, 이를 통해 하나 혹은 몇몇의 오브젝트로 사용자의 워크로드의 관리가 보다 쉽게 가능해진다.</description>
    </item>
    <item>
      <title>1. 학습목표</title>
      <link>http://mungdocs.kro.kr/devops/docs/CICD/CICD/with-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/CICD/CICD/with-toc/</guid>
      <description>&#xD;학습목표&#xD;#&#xD;클라우드 서비스를 활용하기 위한 기본 지식 학습&#xA;클라우드 서비스에 내 프로젝트를 단순 배포하기 위한 환경을 구축&#xA;클라우드 서비스 내 프로젝트 배포를 간편화&#xA;클라우드 서비스에 환경 구축 없이 프로젝트 배포 ( Elastic Beanstalk )&#xA;클라우드 서비스에 배포 자동화&#xA;클라우드 서비스 무중단 배포&#xA;정적 IP 할당을 위한 NLB 활용&#xA;최종목표&#xA;스프링 부트를 사용한 간단한 프로젝트를 생성 후, 배포 </description>
    </item>
    <item>
      <title>Docker</title>
      <link>http://mungdocs.kro.kr/devops/docs/Docker/Docker/Docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/Docker/Docker/Docker/</guid>
      <description>&#xD;Docker&#xD;#&#xD;Docker 와 Container&#xD;#&#xD;#&#xD;</description>
    </item>
    <item>
      <title>With ToC</title>
      <link>http://mungdocs.kro.kr/devops/docs/CICD/CICD/table-of-contents/with-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/CICD/CICD/table-of-contents/with-toc/</guid>
      <description>Caput vino delphine in tamen vias&#xD;#&#xD;Cognita laeva illo fracta&#xD;#&#xD;Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.&#xA;Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere&#xD;#&#xD;Pectora et sine mulcere, coniuge dum tincta incurvae.</description>
    </item>
    <item>
      <title>암호화</title>
      <link>http://mungdocs.kro.kr/devops/docs/CICD/CICD/key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://mungdocs.kro.kr/devops/docs/CICD/CICD/key/</guid>
      <description>암호화의 기술과 역사&#xD;#&#xD;암호화의 역사&#xD;#&#xD;시대 기간 특징 종류 고대 고대 - 19세기 말 수동 암호 사용 (단순, 문자 대입하여 암호화) Scytale, Caesar, Vigenere, Beaufort 등 근대 1900 - 1940년대 기계 암호 사용 (복잡한 기계를 이용하여 암호화) Enigma, M-209 등 현대 1950년대 - 현재 샤뇬의 &amp;ldquo;암호학의 수학적 배경&amp;rdquo; 발표 이후 시작, 컴퓨터 암호 사용 (컴퓨터 연산을 이용하여 암호화) DES, SEED, Rijindael, RSA, ECC, KCDSA 등 고대에는 외교, 군사 등의 한정적인 분야의 사용되었으나, 현대에는 인터넷, 전자상거래 등이 발달하면서 전반적인 분야의 대한 보안(암호화)의 기능이 중요시 되기 시작했다.</description>
    </item>
  </channel>
</rss>
